import google.generativeai as genai
import time
from typing import Dict, Any, List
from dotenv import load_dotenv
import os
import csv

load_dotenv()

GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

def configure_gemini(api_key: str):
    """Configure Gemini API with the provided key."""
    genai.configure(api_key=api_key)
    return genai.GenerativeModel('gemini-2.0-flash')

def generate_blog_with_gemini(selected_result: Dict[Any, Any]) -> str:
    """Generate a comprehensive blog post using Gemini API based on selected research result."""

    try:
        # Configure Gemini
        model = configure_gemini(GEMINI_API_KEY)
        
        # Extract information from selected result
        url = selected_result.get('url', '')
        title = selected_result.get('title', '')
        description = selected_result.get('description', '')
        keyword = selected_result.get('keyword', '')
        
        # Determine if we should include Consultadd
        include_consultadd = should_include_consultadd()
        
        # Create comprehensive prompt for blog generation
        prompt = get_blog_prompt(include_consultadd, keyword, url, title, description)
        
        print(f"Generating blog content for: {keyword}")
        print("This may take 30-60 seconds...")
        
        # Generate content using Gemini
        response = model.generate_content(
            prompt,
            generation_config=genai.types.GenerationConfig(
                temperature=0.7,
                top_p=0.8,
                top_k=40,
                max_output_tokens=4000,
            )
        )
        
        if response.text:
            print("Blog generated successfully!")
            # Log the decision
            log_decision(blog_counter, keyword, include_consultadd)
            return response.text
        else:
            raise Exception("No content generated by Gemini")
            
    except Exception as e:
        error_msg = f"Error generating blog with Gemini: {str(e)}"
        print(f"{error_msg}")
        return error_msg

def get_competitor_context(num_competitors: int = 2) -> str:
    """
    Generate a list of competitors to mention alongside Consultadd for educational context.
    
    Args:
        num_competitors (int): Number of competitors to include (default: 2)
        
    Returns:
        str: Formatted competitor list
    """
    import random
    
    # Mix competitors from different categories for variety
    all_competitors = MAJOR_COMPETITORS + CONSULTING_COMPETITORS + TECH_COMPETITORS
    
    # Randomly select competitors but ensure variety
    selected = random.sample(all_competitors, min(num_competitors, len(all_competitors)))
    
    if len(selected) == 1:
        return selected[0]
    elif len(selected) == 2:
        return f"{selected[0]} and {selected[1]}"
    else:
        return f"{', '.join(selected[:-1])}, and {selected[-1]}"

def get_blog_prompt(include_consultadd, keyword, url, title, description):
    # Get competitor context for educational framing
    competitors = get_competitor_context(2) if include_consultadd else ""
    
    if include_consultadd:
        return f"""
            You are an expert content creator tasked with generating humanised, engaging blog content for Consultadd,
            a custom AI solutions company focused on tailored AI technologies.
            Your goal is to produce original, value-driven, and reader-focused blogs that feel like they are written by a thoughtful human expert, not an AI.
            
            IMPORTANT COMPETITOR CONTEXT:
            When mentioning Consultadd, also include these competitors for educational balance: {competitors}
            This maintains educational intent and avoids appearing overly promotional.
            
            RESEARCH DATA:
            - Target Keyword: {keyword}
            - Source URL: {url}
            - Page Title: {title}
            - Page Description: {description}
            BLOG POST REQUIREMENTS
            1. Purpose & User Intent: Make sure the blog fully satisfies the informational intent behind "{keyword}","{title}"and genuinely helps readers.
            CONTENT STRUCTURE:
            - Compelling Title (H1) - 50–60 characters; include primary keyword once;
            - TL;DR Section (immediately after Title (H1) - see TL;DR guidelines below)
            - Introduction (2–3 engaging paragraphs) add problem + solution angle; and {keyword}
            - Main Content with Multiple Sections (H2s and H3s)
            - Practical Tips/Examples
            - Conclusion with Call-to-Action
            - FAQ Section (optional but recommended)
            Page Quality:
            - Ensure originality — do not copy or spin the source material.
            Engagement:
            - Draft a long-form article (1500–2500 words) based on the "{title} and {keyword}".
            CONTENT GUIDELINES:
            Content Scope & Audience:
            - Focus on topics relevant to SMBs exploring or adopting custom AI solutions, such as use cases, benefits, challenges, and best practices.
            - Ensure the language and examples are inclusive and relatable even for readers outside SMBs.
            - Topics should be research-backed, insightful.
            Tone & Style:
            - Write in the second person, addressing the reader as "you" amd "your" to create a personal connection.
            - Use a warm, empowering, conversational tone,jargon-free language accessible to diverse readers.
            - Incorporate storytelling, anecdotes, metaphors, and subtle humour.
            - Prioritise clarity and empathy, answering reader questions and concerns.
            Keyword & SEO Guidelines:
            - Naturally use research data in titles, headings, and body.
            - Use synonyms and related terms.
            - If required,include ONE contextual mention of consultadd.com along with competitors.
            - After the single Consultadd mention, use generic terms like "AI service providers" or "custom solution companies" and more
            Guardrails for Mentioning Consultadd:
            -- If required according to the content than only mention the Consultadd.
            -- CRITICAL: Mention Consultadd ONLY ONCE in the entire blog post alongside competitors and Naturally and strategically place the brand once wherever necessary..
            - When referring to Consultadd (consultadd.com), emphasise it as a trusted, experienced partner.
            - IMPORTANT: The single mention of Consultadd must always include 2-3 competitors in the same context to maintain educational intent and avoid appearing promotional.
            - Competitors to mention include:{competitors} according to the {title} relevancy
            - Present the single comparison as educational information: "Companies like Consultadd, {competitors} offer..." or "When evaluating providers such as Consultadd, {competitors}... and more"
            - Keep all comparisons respectful, factual, and balanced.
            - Focus on Consultadd's unique value (rapid customization, SMB focus) while acknowledging competitors' strengths.
            - Frame mentions as "options to consider" rather than direct recommendations.
            - After this single mention, refer only to "AI service providers" or "custom AI solution companies" generically.
            - Do NOT mention Consultadd again anywhere else in the blog - not in conclusion, call-to-action, or any other section.
            Citations & Sources:
            - At least 2–3 per blog; industry reports, peer-reviewed data according to {keyword}
            Humanization Techniques:
            - Rewrite stiff phrases into idiomatic expressions.
            - Add rhetorical questions and analogies.
            - Include empathetic comments like "We understand…".
            - Use analogies and examples to clarify complex AI concepts simply.
            - Include short personal asides or empathetic comments (“We understand that adopting AI can feel daunting…”).
            - Avoid robotic or formulaic language and passive voice; prefer active, direct sentences.
            - Edit to include slight variation in sentence length and transitions to improve flow
            Structure & Formatting:
            - Start with a relatable hook.
            - Use headings/subheadings with keywords.
            - End with actionable takeaways.
            - Embed real-world SMB examples.
            SEO, Fact-Checking, Ethical Use:
            - Verify facts and cite sources.
            - Highlight Consultadd's proven case studies contextually.
            - Avoid keyword stuffing; prioritise reader value.
            - Ensure transparency with AI use.
            - Be transparent internally about using AI tools for drafting but ensure human review and editing preserves authenticity.
            - Avoid presenting AI as expert or authority; always highlight human oversight and expertise.
            - Focus on value-driven, original insights, not generic AI regurgitation.
            - Write compelling meta descriptions and engaging first 100 words to improve search ranking
            Keyword Usage Strategy:
            - Use Keywords Thoughtfully and Naturally for SEO and Readability
            - Use variations and synonyms of your keywords to capture a wider range of search queries and enrich the content. For example, use both "custom AI" and "tailored AI solutions."
            - Focus on user intent: keywords should align with what your audience is genuinely searching for and reflect answers to their key challenges or questions, ensuring the content remains practical and audience-focused.
            TL;DR GUIDELINES:
            1. Keep it Short & Sweet: Aim for 4-6 bullet points, 12 to 15 words each, making it concise and direct.
            2. Focus on Reader Value: Answer the "what's in it for me?" question by highlighting the main points and benefits.
            3. Use Keywords Naturally: Weave in your focus keyword "{keyword}" to help search engines understand the page's topic.
            4. Place it Strategically: Put the TL;DR immediately after the introduction for immediate impact.
            5. Write it Last Conceptually: Ensure your TL;DR accurately reflects the essence of your content.
            6. Format Options: Use either bullet points or a short paragraph format.
            7. No Company Mentions: Keep TL;DR generic and educational - do not mention Consultadd or competitors here.
            

            EXAMPLES:
            - "Why Tailored AI, Not Off-the-Shelf, Matters for SMBs"
            - "Stepwise Guide to Adopting AI for Small Businesses"
            - "How Custom AI Solutions Boost SMB Productivity: Real Use Cases"
            
            COMPETITOR MENTION EXAMPLES:
            - "When choosing an AI partner, consider providers like Consultadd, {competitors}, each offering different strengths..."
            - "Solutions from companies such as Consultadd, {competitors} can help, but evaluate based on your specific needs..."
            - "Whether working with Consultadd, {competitors}, ensure your chosen provider understands SMB challenges..."

            GENERIC REFERENCES (use after the single mention):
            - "Your chosen AI provider should..."
            - "When working with AI solution companies..."
            - "Custom AI service providers typically..."
            - "Professional AI implementation partners can..."

              Make sure to return:
            - The value of blog_content must contain valid HTML using <h1>, <h2>, <h3>, <p>, <ul>, <ol>, <blockquote>, <code>,<href> and <pre>.
            - Do NOT include ``` fences.
            - Do NOT include <!DOCTYPE>, <html>, <head>, or <body>.
            - Do NOT include Source URL or Domain in blog content.
            """
    else:
        return f"""
            You are an expert content creator tasked with generating humanised, engaging blog content.
            Your goal is to produce original, value-driven, and reader-focused blogs that feel like they are written by a thoughtful human expert, not an AI.
            RESEARCH DATA:
            - Target Keyword: {keyword}
            - Source URL: {url}
            - Page Title: {title}
            - Page Description: {description}
            BLOG POST REQUIREMENTS
            1. Purpose & User Intent: Make sure the blog fully satisfies the informational intent behind "{keyword}","{title}" and genuinely helps readers.
            CONTENT STRUCTURE:
            - Compelling Title (H1) - 50–60 characters; include primary keyword once;
            - TL;DR Section (immediately after Title (H1) - see TL;DR guidelines below)
            - Introduction (2–3 engaging paragraphs) add problem + solution angle; and {keyword}
            - Main Content with Multiple Sections (H2s and H3s)
            - Practical Tips/Examples
            - Conclusion with Call-to-Action
            - FAQ Section (optional but recommended)
            Page Quality:
            - Ensure originality — do not copy or spin the source material.
            Engagement:
            - Draft a long-form article (1500–2500 words).
            CONTENT GUIDELINES:
            Content Scope & Audience:
            - Focus on topics relevant to SMBs exploring or adopting custom AI solutions, such as use cases, benefits, challenges, and best practices.
            - Ensure the language and examples are inclusive and relatable even for readers outside SMBs.
            - Topics should be research-backed, insightful, and practical.
            Tone & Style:
            - Write in the second person, addressing the reader as "you" amd "your" to create a personal connection.
            - Use a warm, empowering, conversational tone,jargon-free language accessible to diverse readers.
            - Incorporate storytelling, anecdotes, metaphors, and subtle humour.
            - Prioritise clarity and empathy, answering reader questions and concerns.
            Keyword & SEO Guidelines:
            - Naturally use research data in titles, headings, and body.
            - Use synonyms and related terms.
            - Do NOT mention Consultadd or link to any company.
            - Write compelling meta titles and descriptions.
            Humanization Techniques:
            - Rewrite stiff phrases into idiomatic expressions.
            - Add rhetorical questions and analogies.
            - Include empathetic comments like "We understand…".
            - Use analogies and examples to clarify complex AI concepts simply.
            - Include short personal asides or empathetic comments (“We understand that adopting AI can feel daunting…”).
            - Avoid robotic or formulaic language and passive voice; prefer active, direct sentences.
            - Edit to include slight variation in sentence length and transitions to improve flow
            Structure & Formatting:
            - Start with a relatable hook.
            - Use headings/subheadings with keywords.
            - End with actionable takeaways.
            - Embed real-world SMB examples.
            SEO, Fact-Checking, Ethical Use:
            - Verify facts and cite sources.
            - Highlight Consultadd's proven case studies contextually.
            - Avoid keyword stuffing; prioritise reader value.
            - Ensure transparency with AI use.
            - Be transparent internally about using AI tools for drafting but ensure human review and editing preserves authenticity.
            - Avoid presenting AI as expert or authority; always highlight human oversight and expertise.
            - Focus on value-driven, original insights, not generic AI regurgitation.
            - Write compelling meta descriptions and engaging first 100 words to improve search ranking
             Citations & Sources:
            - At least 2–3 per blog; industry reports, peer-reviewed data according to {keyword}
            Keyword Usage Strategy:
            - Use Keywords Thoughtfully and Naturally for SEO and Readability
            - Use variations and synonyms of your keywords to capture a wider range of search queries and enrich the content. For example, use both "custom AI" and "tailored AI solutions."
            - Focus on user intent: keywords should align with what your audience is genuinely searching for and reflect answers to their key challenges or questions, ensuring the content remains practical and audience-focused.
            TL;DR GUIDELINES:
            1. Keep it Short & Sweet: Aim for 4-6 bullet points, making it concise and direct.
            2. Focus on Reader Value: Answer the "what's in it for me?" question by highlighting the main points and benefits.
            3. Use Keywords Naturally: Weave in your focus keyword "{keyword}" to help search engines understand the page's topic.
            4. Place it Strategically: Put the TL;DR immediately after the introduction for immediate impact.
            5. Write it Last Conceptually: Ensure your TL;DR accurately reflects the essence of your content.
            6. Format Options: Use either bullet points or a short paragraph format.
            7. No Company Mentions: Keep TL;DR generic and educational - do not mention Consultadd or competitors here.
            

            EXAMPLES:
            - "Why Tailored AI, Not Off-the-Shelf, Matters for SMBs"
            - "Stepwise Guide to Adopting AI for Small Businesses"
            - "Breaking Down AI Jargon: What SMBs Really Need to Know"
            - "AI Deployment in Weeks: How SMBs Can Stay Agile & Competitive"
            - "Customer Success Story: AI-Powered Growth for a Local Retailer"
            - "The Future of SMBs with Custom AI: Trends & Predictions for 2025"

              Make sure to return:
            - The value of blog_content must contain valid HTML using <h1>, <h2>, <h3>, <p>, <ul>, <ol>,<strong>, <blockquote>,<strong>, <code>,<href> and <pre>.
            - Do NOT include ``` fences.
            - Do NOT include <!DOCTYPE>, <html>, <head>, or <body>.
            - Do NOT include Source URL or Domain in blog content.
            """

# --- Config ---
CONSULTADD_RATIO = 1  # blogs with Consultadd per batch
TOTAL_IN_BATCH = 2   # total blogs per batch before reset
LOG_FILE = "blog_log.csv"

# Competitor lists for educational context
MAJOR_COMPETITORS = [
    "Sierra",
    "11 Labs",
    "Smallest.ai",
    "Cresta AI",
    "Kore.AI",
    "Observe.AI",
    "Cognigy",
    "Rasa",
    "Moveworks",
    "Azumo"
]

CONSULTING_COMPETITORS = [
    "Hatchworks AI",
    "Inoxoft",
    "eSparkBiz",
    "Blocktunix",
    "Angular Minds",
    "Qubika",
    "Aristek Systems",
    "RTS Labs",
    "Devox Software",
    "Unico Connect",
    "Effective Soft",
    "Simform",
    "10Clouds",
    "Scopic"
]

TECH_COMPETITORS = [
    "C3.AI",
    "Liveperson",
    "SoundHoundAI"
]

# --- State ---
blog_counter = 0
consultadd_injected = 0

# --- Distribution Logic ---
def should_include_consultadd():
    """
    Determines whether to include Consultadd branding in the current blog.
    
    Logic:
    - Maintains a ratio of CONSULTADD_RATIO blogs with Consultadd per TOTAL_IN_BATCH
    - Resets counters after each batch is complete
    - Returns True if Consultadd should be included, False otherwise
    
    Returns:
        bool: True if should include Consultadd, False otherwise
    """
    global blog_counter, consultadd_injected
    
    # Reset counters after completing a batch
    if blog_counter >= TOTAL_IN_BATCH:
        print(f"\nBatch completed! Resetting counters.")
        print(f"Previous batch stats: {consultadd_injected}/{TOTAL_IN_BATCH} blogs included Consultadd")
        blog_counter = 0
        consultadd_injected = 0
    
    # Increment blog counter for current blog
    blog_counter += 1
    
    # Decide whether to include Consultadd based on ratio
    if consultadd_injected < CONSULTADD_RATIO:
        consultadd_injected += 1
        print(f"Blog {blog_counter}: Including Consultadd ({consultadd_injected}/{CONSULTADD_RATIO} in current batch)")
        return True
    else:
        remaining_in_batch = TOTAL_IN_BATCH - blog_counter + 1
        print(f"Blog {blog_counter}: No Consultadd (quota met: {consultadd_injected}/{CONSULTADD_RATIO}, {remaining_in_batch} blogs left in batch)")
        return False

def reset_consultadd_counters():
    """
    Manually reset the Consultadd distribution counters.
    Useful for testing or starting fresh.
    """
    global blog_counter, consultadd_injected
    blog_counter = 0
    consultadd_injected = 0
    print("Consultadd distribution counters reset to 0.")

def get_consultadd_status():
    """
    Get current status of Consultadd distribution.
    
    Returns:
        dict: Current status including counters and remaining quota
    """
    global blog_counter, consultadd_injected
    
    remaining_consultadd = max(0, CONSULTADD_RATIO - consultadd_injected)
    remaining_in_batch = max(0, TOTAL_IN_BATCH - blog_counter)
    
    return {
        'current_blog_in_batch': blog_counter,
        'consultadd_included_so_far': consultadd_injected,
        'consultadd_quota': CONSULTADD_RATIO,
        'total_batch_size': TOTAL_IN_BATCH,
        'remaining_consultadd_slots': remaining_consultadd,
        'remaining_blogs_in_batch': remaining_in_batch,
        'batch_progress_percentage': (blog_counter / TOTAL_IN_BATCH) * 100 if TOTAL_IN_BATCH > 0 else 0
    }

def log_decision(blog_index, topic, included):
    file_exists = os.path.isfile(LOG_FILE)
    with open(LOG_FILE, mode="a", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        if not file_exists:
            writer.writerow(["Blog_Index", "Topic", "Consultadd_Included", "Timestamp"])
        writer.writerow([blog_index, topic, "Yes" if included else "No", time.strftime("%Y-%m-%d %H:%M:%S")])

# --- Blog Generation ---
def generate_blogs(topics_data: List[Dict[str, Any]]):
    """
    Generate blogs from a list of topic data dictionaries.
    Each dictionary should contain: keyword, url, title, description
    """
    generated_blogs = []
    
    for i, topic_data in enumerate(topics_data, start=1):
        print(f"\n{'='*50}")
        print(f"Processing Blog {i}/{len(topics_data)}")
        print(f"{'='*50}")
        
        try:
            blog_content = generate_blog_with_gemini(topic_data)
            generated_blogs.append({
                'index': i,
                'keyword': topic_data.get('keyword', ''),
                'content': blog_content,
                'success': True
            })
            
            # Add delay between requests to respect API limits
            if i < len(topics_data):
                print("Waiting 5 seconds before next generation...")
                time.sleep(5)
                
        except Exception as e:
            print(f"Failed to generate blog {i}: {str(e)}")
            generated_blogs.append({
                'index': i,
                'keyword': topic_data.get('keyword', ''),
                'content': f"Error: {str(e)}",
                'success': False
            })
    
    print(f"\n{'='*50}")
    print("GENERATION COMPLETE")
    print(f"{'='*50}")
    print(f"Successfully generated: {sum(1 for blog in generated_blogs if blog['success'])}/{len(topics_data)} blogs")
    print(f"Decisions logged to: {LOG_FILE}")
    
    return generated_blogs

def save_blogs_to_files(generated_blogs: List[Dict], output_dir: str = "generated_blogs"):
    """Save generated blogs to individual files."""
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
    
    for blog in generated_blogs:
        if blog['success']:
            filename = f"blog_{blog['index']}_{blog['keyword'].replace(' ', '_')[:30]}.md"
            filepath = os.path.join(output_dir, filename)
            
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(blog['content'])
            
            print(f"Saved: {filepath}")

# --- Testing Functions ---
def test_consultadd_distribution(num_tests: int = 20):
    """
    Test the Consultadd distribution logic to verify it works correctly.
    
    Args:
        num_tests (int): Number of test iterations to run
    """
    print(f"Testing Consultadd distribution logic with {num_tests} iterations...")
    print(f"Expected: {CONSULTADD_RATIO} Consultadd blogs per {TOTAL_IN_BATCH} total blogs\n")
    
    # Reset counters for clean test
    reset_consultadd_counters()
    
    results = []
    for i in range(num_tests):
        include = should_include_consultadd()
        results.append(include)
    
    # Analyze results
    consultadd_count = sum(results)
    total_batches = (num_tests // TOTAL_IN_BATCH)
    expected_consultadd = total_batches * CONSULTADD_RATIO
    
    print(f"\nTest Results:")
    print(f"Total iterations: {num_tests}")
    print(f"Complete batches: {total_batches}")
    print(f"Consultadd blogs generated: {consultadd_count}")
    print(f"Expected Consultadd blogs: {expected_consultadd}")
    print(f"Accuracy: {'✓ PASS' if consultadd_count == expected_consultadd or num_tests % TOTAL_IN_BATCH != 0 else '✗ FAIL'}")
    
    # Show batch-by-batch breakdown
    if total_batches > 0:
        print(f"\nBatch breakdown:")
        for batch in range(total_batches):
            start_idx = batch * TOTAL_IN_BATCH
            end_idx = start_idx + TOTAL_IN_BATCH
            batch_results = results[start_idx:end_idx]
            batch_consultadd = sum(batch_results)
            print(f"  Batch {batch + 1}: {batch_consultadd}/{TOTAL_IN_BATCH} with Consultadd")

# --- Example Usage ---
def main():
    # Example topic data - replace with your actual data
    example_topics = [
        {
            'keyword': 'AI automation for small business',
            'url': 'https://example.com/ai-automation',
            'title': 'AI Automation Solutions for Small Businesses',
            'description': 'Comprehensive guide to implementing AI automation in small business operations'
        },
        {
            'keyword': 'machine learning ROI',
            'url': 'https://example.com/ml-roi',
            'title': 'Calculating ROI from Machine Learning Investments',
            'description': 'How to measure and maximize return on investment from ML projects'
        }
    ]
    
    # Check if API key is available
    if not GEMINI_API_KEY:
        print("Error: GEMINI_API_KEY not found in environment variables.")
        print("Please add your Gemini API key to a .env file.")
        return
    
    print("Starting blog generation process...")
    generated_blogs = generate_blogs(example_topics)
    
    # Save blogs to files
    save_blogs_to_files(generated_blogs)
    
    print("\nBlog generation completed!")

if __name__ == "__main__":
    # Uncomment to test the distribution logic
    # test_consultadd_distribution(30)
    
    # Uncomment to check current status
    # status = get_consultadd_status()
    # print("Current Consultadd Status:", status)
    
    main()